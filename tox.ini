# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist = True
skip_missing_interpreters = True
envlist = lint, static-charm, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
all_path = {[vars]src_path} {[vars]tst_path}
py_path = {toxinidir}/lib:{[vars]src_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {[vars]py_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    ruff
commands =
    ruff --fix {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    ruff
    codespell
commands =
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache
    ruff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,unit,integration}]
description = Run static analysis checks
setenv =
    charm: MYPYPATH = {toxinidir}/lib
    unit: MYPYPATH = {toxinidir}/lib:{[vars]src_path}
    integration: MYPYPATH = {toxinidir}/lib:{[vars]src_path}:{[vars]tst_path}/integration
deps =
    mypy
    types-PyYAML
    types-setuptools
    types-toml
    charm,unit: {[testenv:unit]deps}
    integration: {[testenv:integration]deps}
commands =
    charm: mypy {[vars]src_path} {posargs}
    unit: mypy {[vars]tst_path}/unit {posargs}
    integration: mypy {[vars]tst_path}/integration {posargs}

[testenv:static-lib]
description = Empty check because we have no libs
commands =
    ;

[testenv:reqs]
description = Check for missing or unused requirements
deps =
    -r{toxinidir}/requirements.txt
    pip-check-reqs
    # pip-check-reqs does not yet work with recent pip
    pip<=21.1.3
commands =
    pip-missing-reqs {toxinidir}/src {toxinidir}/lib --requirements-file={toxinidir}/requirements.txt
    pip-extra-reqs {toxinidir}/src {toxinidir}/lib --requirements-file={toxinidir}/requirements.txt

[testenv:unit]
description = Run unit tests
setenv =
    PYTHONPATH = {[vars]py_path}:{[vars]tst_path}/unit
deps =
    pytest
    coverage[toml]
    hypothesis
    -r{toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    juju
    pytest
    pytest-operator
    aiohttp
    PyYAML
    prometheus_api_client
commands =
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/tests/integration
